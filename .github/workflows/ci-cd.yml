name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # 'main' 브랜치에 푸시될 때마다 실행
  workflow_dispatch:  # 수동으로 트리거 가능

jobs:
  # 1. CI - Docker 이미지 빌드 및 푸시
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # 프론트엔드 이미지를 빌드하고 푸시
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }} ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  # 2. CD - 서버에 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build  # build 작업이 완료된 후에 실행됨

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # 서버에서 Docker Compose로 이미지를 Pull하고 배포
            cd /srv/docker/
            docker-compose pull frontend  # 프론트엔드만 풀
            docker-compose up -d frontend  # 프론트엔드만 실행

