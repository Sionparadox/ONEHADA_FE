name: CI/CD Pipeline for ONEHADA_FE

on:
  push:
    branches:
      - main # main 브랜치에 푸시할 때 실행
  pull_request:
    branches:
      - main # main 브랜치에 PR이 열릴 때 실행

jobs:
  build:
    runs-on: ubuntu-latest # Ubuntu 환경에서 실행

    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Node.js 설치 (프론트엔드 빌드에 필요)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # 사용하고자 하는 Node.js 버전 (프론트엔드 빌드에 맞게 조정)

      # 3. 의존성 캐시 설정
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. npm으로 빌드 (테스트 생략)
      - name: Install dependencies and build
        run: |
          cd one-hada
          npm install
          npm run build  # 빌드 커맨드 (예: React, Vue 등)

      # 5. Docker 설치 및 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6. Docker Hub에 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub 로그인 정보
          password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub 로그인 정보

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/onehada-fe:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/onehada-fe:latest

  # 8. 배포 작업: EC2 서버로 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build # build 작업이 완료된 후 실행됨

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 서버 IP
          username: ${{ secrets.EC2_USERNAME }} # EC2 서버 사용자 이름
          key: ${{ secrets.EC2_SSH_KEY }} # EC2 SSH private key
          port: 22
          script: |
            # 서버에서 Docker Compose로 이미지를 Pull하고 배포
            cd /srv/docker/  # Docker Compose 파일이 위치한 디렉토리로 이동
            docker-compose pull  # 프론트엔드, 백엔드 이미지 풀
            docker-compose up -d  # 모든 서비스 실행
